@
/* "CodeWorker":	a scripting language for parsing and generating text.

Copyright (C) 1996-1997, 1999-2002 Cédric Lemaire

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

To contact the author: codeworker@free.fr
*/

if getMarkupKey() == "functions and procedures" {
	foreach i in this.procedureList if !findElement("info", i.modifierList) {
		@			static SEQUENCE_INTERRUPTION_LIST @i.name@(@
		local bTree = "";
		if findElement("visibility", i.modifierList) {
			@DtaScriptVariable& visibility@
			if !isEmpty(i.parameterList) {
				@, @
			}
		}
		foreach j in i.parameterList {
			if !first(j) {
				@, @
			}
			if !isBasicType(j.type) set bTree = "true";
			@@getCppParameterType(j.type)@ @getCppVariable(j.name, j.type)@@
		}
		@);
@
		if bTree {
			@			static SEQUENCE_INTERRUPTION_LIST @i.name@(@
			foreach j in i.parameterList {
				if !first(j) {
					@, @
				}
				if isBasicType(j.type) {
					@@getCppParameterType(j.type)@ @getCppVariable(j.name, j.type)@@
				} else if j.type == "stringref" || j.type == "stringlist" || j.type == "doubleref" || j.type == "boolref" {
					@CppParsingTree_var @getCppVariable(j.name, "tree")@@
				} else if j.type == "treexpr" {
					@CppParsingTree_varexpr& @getCppVariable(j.name, j.type)@@
				} else {
					@CppParsingTree_var @getCppVariable(j.name, j.type)@@
				}
			}
			@);
@
		}
	}
	@
@
	foreach i in this.functionList if !findElement("info", i.modifierList) && !findElement("user", i.modifierList) {
		@			static @getCppType(i.return_type)@ @i.name@(@
		local bTree = "";
		foreach j in i.parameterList {
			if !first(j) {
				@, @
			}
			if !isBasicType(j.type) set bTree = "true";
			@@getCppParameterType(j.type)@ @getCppVariable(j.name, j.type)@@
		}
		@);
@
		if bTree {
			@			static @getCppType(i.return_type)@ @i.name@(@
			foreach j in i.parameterList {
				if !first(j) {
					@, @
				}
				if isBasicType(j.type) {
					@@getCppParameterType(j.type)@ @getCppVariable(j.name, j.type)@@
				} else if j.type == "stringref" || j.type == "stringlist" || j.type == "doubleref" || j.type == "boolref" {
					@CppParsingTree_var @getCppVariable(j.name, "tree")@@
				} else if j.type == "treexpr" {
					@CppParsingTree_expr& @getCppVariable(j.name, j.type)@@
				} else {
					@CppParsingTree_var @getCppVariable(j.name, j.type)@@
				}
			}
			@);
@
		}
	}
}